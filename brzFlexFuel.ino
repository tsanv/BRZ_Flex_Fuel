/*******************************************************
This program will sample a 50-150hz signal depending on ethanol
content, and output a 0-5V signal via PWM.
The LCD (for those using an Arduino Uno + LCD shield) will display ethanol content, hz input, mv output, fuel temp

Connect PWM output to TGV. 3.3kOhm resistor works fine.

Input pin 8 (PB0) ICP1 on Atmega328
Output pin 3 or 11, defined below


********************************************************/

// include the library code:
//Changes to use 0.96 oled screen //V-tsan
#include <SPI.h>
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
Adafruit_SSD1306 display(128, 64, &Wire, 4, 800000UL, 100000UL);

//BRZ v3 image code here
static const unsigned char PROGMEM brzCar [] ={
0x00, 0x00, 0x00, 0x00, 0x03, 0xff, 0xf0, 0x00, 0x00, 0x1f, 0xff, 0x80, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x07, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xd0, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xe8, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf4, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x5f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf6, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x19, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0xb0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0d, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x01, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x03, 0x40, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x80, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x07, 0x05, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x41, 0xe0, 0x00, 0x00,
	0x00, 0x00, 0x3f, 0x87, 0x80, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x43, 0xf8, 0x00, 0x00,
	0x00, 0x00, 0x7f, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x83, 0xfc, 0x00, 0x00,
	0x00, 0x00, 0x7f, 0x8b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf3, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0x7f, 0x8f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0x7f, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0x3f, 0xf0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x0f, 0xf8, 0x00, 0x00,
	0x00, 0x00, 0x03, 0xf0, 0x20, 0x00, 0x40, 0x00, 0x00, 0x06, 0x00, 0x08, 0x0b, 0xc0, 0x00, 0x00,
	0x00, 0x00, 0x1f, 0x30, 0x3f, 0xff, 0xe0, 0x00, 0x00, 0x07, 0xff, 0xfc, 0x08, 0xf0, 0x00, 0x00,
	0x00, 0x00, 0x06, 0x00, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xf8, 0x00, 0x40, 0x00, 0x00,
	0x00, 0x00, 0x23, 0x08, 0x1f, 0xff, 0xf0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x30, 0xcc, 0x00, 0x00,
	0x00, 0x00, 0x41, 0x18, 0x1f, 0xff, 0xe0, 0x00, 0x00, 0x0f, 0xff, 0xf0, 0x31, 0x82, 0x00, 0x00,
	0x00, 0x00, 0x41, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x3f, 0x82, 0x00, 0x00,
	0x00, 0x01, 0x81, 0x0f, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xf1, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x81, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x87, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0xc1, 0x00, 0x00,
	0x00, 0x01, 0x86, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x43, 0x00, 0x00,
	0x00, 0x01, 0xee, 0x00, 0x0e, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xe0, 0x00, 0x7f, 0x00, 0x00,
	0x00, 0x01, 0x9e, 0x00, 0x01, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x71, 0x00, 0x00,
	0x00, 0x01, 0x86, 0x00, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x00, 0xc1, 0x00, 0x00,
	0x00, 0x01, 0x81, 0x07, 0xf0, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x0f, 0xc1, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x81, 0xc0, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf8, 0x43, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x81, 0xff, 0x0f, 0x80, 0x00, 0x00, 0x00, 0x00, 0x03, 0xf0, 0xff, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x81, 0x06, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xc1, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x81, 0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x01, 0x81, 0x00, 0x00,
	0x00, 0x01, 0x81, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x81, 0x00, 0x00,
	0x00, 0x00, 0xc0, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x00, 0x00, 0xc0, 0xc0, 0x00, 0x1f, 0xff, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x00, 0x02, 0xc0, 0xc0, 0x00, 0x3f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x02, 0x02, 0x00, 0x00,
	0x00, 0x03, 0xe0, 0xc0, 0x00, 0x60, 0x00, 0x00, 0x00, 0x00, 0x0c, 0x00, 0x02, 0x06, 0x80, 0x00,
	0x00, 0x03, 0xe0, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0x00, 0x02, 0x0f, 0x80, 0x00,
	0x00, 0x03, 0xe0, 0xff, 0x00, 0xdf, 0x9f, 0xff, 0xff, 0xf9, 0xf2, 0x00, 0xfe, 0x0f, 0x80, 0x00,
	0x00, 0x01, 0xe0, 0x7f, 0xf8, 0xdf, 0xbf, 0xff, 0xff, 0xff, 0xf2, 0x1f, 0xfc, 0x0f, 0x00, 0x00,
	0x00, 0x01, 0xe0, 0x7f, 0xff, 0xdf, 0xbf, 0xff, 0xff, 0xfb, 0xfb, 0xff, 0xfc, 0x0f, 0x00, 0x00,
	0x00, 0x01, 0xf8, 0x3f, 0xff, 0xdf, 0xbf, 0xff, 0xff, 0xfb, 0xfb, 0xef, 0xf8, 0x1f, 0x00, 0x00,
	0x00, 0x01, 0xf8, 0x3f, 0xff, 0xdf, 0xbf, 0xff, 0xff, 0xfb, 0xff, 0xef, 0xf8, 0x1f, 0x00, 0x00,
	0x00, 0x01, 0xf8, 0x3b, 0xcf, 0xef, 0xbf, 0xff, 0xff, 0xfb, 0xff, 0xe7, 0xf8, 0x3f, 0x00, 0x00,
	0x00, 0x00, 0xfc, 0x08, 0x07, 0xef, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xc0, 0x30, 0x3e, 0x00, 0x00,
	0x00, 0x00, 0xfc, 0x07, 0x03, 0xef, 0x80, 0x00, 0x00, 0x03, 0xff, 0xc1, 0xc0, 0x3e, 0x00, 0x00,
	0x00, 0x01, 0xe6, 0x01, 0xc3, 0xef, 0xbf, 0xff, 0xff, 0xfb, 0xff, 0x87, 0x00, 0x4f, 0x00, 0x00,
	0x00, 0x03, 0xe3, 0x00, 0xf9, 0xf7, 0xbf, 0xff, 0xff, 0xfb, 0xff, 0x9f, 0x01, 0x87, 0x80, 0x00,
	0x00, 0x02, 0x01, 0x00, 0x3f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xf8, 0x01, 0x80, 0x80, 0x00,
	0x00, 0x03, 0x00, 0xfb, 0x0f, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xe1, 0xbe, 0x00, 0xc0, 0x00,
	0x00, 0x07, 0x80, 0x07, 0x80, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xde, 0x01, 0xc0, 0x01, 0xe0, 0x00,
	0x00, 0x07, 0xe0, 0x00, 0x78, 0xe3, 0xff, 0xff, 0xff, 0xff, 0x8e, 0x1e, 0x00, 0x0f, 0xe0, 0x00,
	0x00, 0x03, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0x80, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
	0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
  };

static const unsigned char PROGMEM smallBrzCar [] ={
// 'download-ConvertImage', 60x40px
0x00, 0x00, 0x3f, 0x80, 0x1f, 0xc0, 0x00, 0x00, 0x00, 0x00, 0x7f, 0xff, 0xff, 0xe0, 0x00, 0x00,
0x00, 0x00, 0xff, 0xff, 0xff, 0xe0, 0x00, 0x00, 0x00, 0x01, 0xff, 0x80, 0x1f, 0xf0, 0x00, 0x00,
0x00, 0x01, 0x80, 0x00, 0x00, 0x18, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x08, 0x00, 0x00,
0x00, 0x73, 0x00, 0x00, 0x00, 0x0c, 0xe0, 0x00, 0x00, 0xf6, 0x00, 0x00, 0x00, 0x0e, 0xf0, 0x00,
0x00, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf0, 0x00, 0x00, 0x38, 0x81, 0x00, 0x08, 0x11, 0xc0, 0x00,
0x00, 0x68, 0xff, 0x00, 0x0f, 0xf0, 0x60, 0x00, 0x00, 0x1c, 0x7f, 0x00, 0x1f, 0xe3, 0x80, 0x00,
0x00, 0x1e, 0x00, 0x00, 0x00, 0x06, 0x80, 0x00, 0x01, 0x20, 0xff, 0xff, 0xff, 0xf0, 0x00, 0x00,
0x01, 0xe0, 0x60, 0x00, 0x00, 0x60, 0x78, 0x00, 0x01, 0x60, 0x10, 0x00, 0x01, 0x80, 0x68, 0x00,
0x01, 0x1c, 0xf0, 0x00, 0x00, 0xe3, 0x88, 0x00, 0x01, 0x12, 0x00, 0x00, 0x00, 0x04, 0x88, 0x00,
0x01, 0x11, 0xff, 0xff, 0xff, 0xf0, 0x80, 0x00, 0x00, 0x90, 0x0f, 0xff, 0xff, 0x00, 0x80, 0x00,
0x03, 0x90, 0x10, 0x00, 0x01, 0x00, 0x98, 0x00, 0x01, 0x9f, 0x8f, 0xff, 0xff, 0x9f, 0x98, 0x00,
0x01, 0x8f, 0xee, 0xff, 0xf7, 0xff, 0x18, 0x00, 0x01, 0xcf, 0xfe, 0xff, 0xf7, 0xff, 0x38, 0x00,
0x00, 0xc7, 0x76, 0xff, 0xf7, 0xee, 0x70, 0x00, 0x01, 0xc3, 0xbe, 0xff, 0xf7, 0xfc, 0x78, 0x00,
0x02, 0x1c, 0xff, 0xff, 0xff, 0xf3, 0x88, 0x00, 0x03, 0x03, 0x1f, 0xff, 0xff, 0x8c, 0x1c, 0x00,
0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xf8, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00
};
// FACE CODE HERE

static const unsigned char PROGMEM pointy[] ={
0x60, 0x06, 0xf0, 0x0f, 0xf8, 0x1f, 0x7c, 0x3e, 0x3e, 0x7c, 0x1f, 0xf8, 0x0f, 0xf0, 0x07, 0xe0,
0x03, 0xc0, 0x01, 0x80,
};

/* Declaration for an SSD1306 display connected to I2C (SDA, SCL pins)
Pins:
 * GND = GND
 * VCC = 5V
 * SCL = A5
 * SDA = A4
  */


int inpPin = 8;     //define input pin to 8
int outPin = 11;    //define PWM output, possible pins with LCD and 32khz freq. are 3 and 11 (Nano and Uno)

//Define global variables
volatile uint16_t revTick;    //Ticks per revolution
uint16_t pwm_output  = 0;     //integer for storing PWM value (0-255 value)
int HZ;                   //unsigned 16bit integer for storing HZ input
int ethanol = 0;              //Store ethanol percentage here
float expectedv;              //store expected voltage here - range for typical GM sensors is usually 0.5-4.5v

int duty;                     //Duty cycle (0.0-100.0)
float period;                 //Store period time here (eg.0.0025 s)
float temperature = 0;        //Store fuel temperature here
int fahr = 0;
int cels = 0;
static long highTime = 0;
static long lowTime = 0;
static long tempPulse;

void setupTimer()   // setup timer1
{
  TCCR1A = 0;      // normal mode
  TCCR1B = 132;    // (10000100) Falling edge trigger, Timer = CPU Clock/256, noise cancellation on
  TCCR1C = 0;      // normal mode
  TIMSK1 = 33;     // (00100001) Input capture and overflow interupts enabled
  TCNT1 = 0;       // start from 0
}

ISR(TIMER1_CAPT_vect)    // PULSE DETECTED!  (interrupt automatically triggered, not called by main program)
{
  revTick = ICR1;      // save duration of last revolution
  TCNT1 = 0;       // restart timer for next revolution
}

ISR(TIMER1_OVF_vect)    // counter overflow/timeout
{ revTick = 0; }        // Ticks per second = 0

bool restDisplay = false; //oled resync

void setup()
{
  Serial.begin(9600);
  pinMode(inpPin,INPUT);
  setPwmFrequency(outPin,1); //Modify frequency on PWM output
  setupTimer();
  // Screen initialize
  display.begin(SSD1306_SWITCHCAPVCC, 0x3c); // initialize with the I2C addr 0x3D (for the 128x64)
  display.clearDisplay();
  display.setTextColor(WHITE);
  display.setRotation(0);// Rotate the display at the start:  0, 1, 2 or 3 = (0, 90, 180 or 270 degrees)
  display.clearDisplay();
  display.drawBitmap(0, 0, brzCar, 128, 64, WHITE); //draw v3 car here
  display.display();
  delay(3000); //start up screen
}

void loop()
{
  getfueltemp(inpPin); //read fuel temp from input duty cycle

  if (revTick > 0) // Avoid dividing by zero, sample in the HZ
    {HZ = 62200 / revTick;}     // 3456000ticks per minute, 57600 per second
    else
    {HZ = 0;}                   //needs real sensor test to determine correct tickrate

  //calculate ethanol percentage
    if (HZ > 50) // Avoid dividing by zero
    {ethanol = (HZ-50);}
    else
    {ethanol = 0;}

if (ethanol > 99) // Avoid overflow in PWM
{ethanol = 99;}

  expectedv = ((((HZ-50.0)*0.01)*4)+0.5);
  //Screen calculations
  pwm_output = 1.1 * (255 * (expectedv/5.0)); //calculate output PWM for ECU


  //PWM output
  analogWrite(outPin, pwm_output); //write the PWM value to output pin
  delay(100);  //make screen more easily readable by not updating it too often



//FACE LOOP here
  ethanolScreen();
  delay(5000);
  //boing();
  //boing();
  //drawOpeneyes(22, 26);
  //delay(1000);
  //drawClosedyes(22);
  //delay(50);
  //drawOpeneyes(22, 26);
 // delay(1000);
  //drawNarrowMouth(16, 16);
  //delay(1000);
  //drawOpeneyes(22, 26);
  //delay(1000);
  drawOpeneyes(22, 26);
  delay(500);
  drawClosedyes(22);
  delay(50);
  drawOpeneyes(22, 26);
  delay(500);
}

void getfueltemp(int inpPin){ //read fuel temp from input duty cycle
highTime = 0;
lowTime = 0;

tempPulse = pulseIn(inpPin,HIGH);
  if(tempPulse>highTime){
  highTime = tempPulse;
  }

tempPulse = pulseIn(inpPin,LOW);
  if(tempPulse>lowTime){
  lowTime = tempPulse;
  }

duty = ((100*(highTime/(double (lowTime+highTime))))); //Calculate duty cycle (integer extra decimal)
float T = (float(1.0/float(HZ)));             //Calculate total period time
float period = float(100-duty)*T;             //Calculate the active period time (100-duty)*T
float temp2 = float(10) * float(period);      //Convert ms to whole number
temperature = ((40.25 * temp2)-81.25);        //Calculate temperature for display (1ms = -40, 5ms = 80)
int cels = int(temperature);
cels = cels*0.1;
float fahrtemp = ((temperature*1.8)+32);
fahr = fahrtemp*0.1;

}

void setPwmFrequency(int pin, int divisor) { //This code snippet raises the timers linked to the PWM outputs
  byte mode;                                 //This way the PWM frequency can be raised or lowered. Prescaler of 1 sets PWM output to 32KHz (pin 3, 11)
  if(pin == 5 || pin == 6 || pin == 9 || pin == 10) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 64: mode = 0x03; break;
      case 256: mode = 0x04; break;
      case 1024: mode = 0x05; break;
      default: return;
    }
    if(pin == 5 || pin == 6) {
      TCCR0B = TCCR0B & 0b11111000 | mode;
    } else {
      TCCR1B = TCCR1B & 0b11111000 | mode;
    }
  } else if(pin == 3 || pin == 11) {
    switch(divisor) {
      case 1: mode = 0x01; break;
      case 8: mode = 0x02; break;
      case 32: mode = 0x03; break;
      case 64: mode = 0x04; break;
      case 128: mode = 0x05; break;
      case 256: mode = 0x06; break;
      case 1024: mode = 0x7; break;
      default: return;
    }
    TCCR2B = TCCR2B & 0b11111000 | mode;
  }
}





void drawOpeneyes(int eyeWidth, int eyeHeight) {
  display.clearDisplay();
  display.fillRoundRect(0, 20, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
  display.fillRoundRect(display.width()-eyeWidth, 20, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
  display.fillRoundRect(display.width()/2-20, display.height()-10, 40, 10, 5, WHITE);
  display.display();
}

void drawClosedyes(int eyeWidth) {
  display.clearDisplay();
  display.fillRoundRect(0, 28, eyeWidth, 6, 3, WHITE);
  display.fillRoundRect(display.width()-eyeWidth, 28, eyeWidth, 6, 3, WHITE);
  display.fillRoundRect(display.width()/2-20, display.height()-10, 40, 10, 5, WHITE);
  display.display();
}

void drawNarrowMouth(int eyeWidth, int eyeHeight) {
  display.clearDisplay();
  display.fillRoundRect(0, 20, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
  display.fillRoundRect(display.width()-eyeWidth, 20, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
  display.fillRoundRect(display.width()/2-35, display.height()-10, 70, 10, 5, WHITE);
  display.display();
}

void boing() {
  int eyeWidth = 22, eyeHeight = 26, animSpeed = 4, eyeStretch = 10;

  int eyePosY;


  for(int i = -eyeStretch ; i <= 50-26; i+=animSpeed){
    eyePosY = max(i, 0);

    display.clearDisplay();
    display.fillRoundRect(0, eyePosY, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
    display.fillRoundRect(display.width()-eyeWidth, eyePosY, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
    display.drawBitmap(display.width()/2-8, display.height()-20, pointy, 16, 10, WHITE);
    display.display();


    if(i>=64-eyeWidth-eyeStretch) eyeHeight -= animSpeed;
    else if(i<0) eyeHeight += animSpeed;
  }


  for(int i = 50-26; i > -eyeStretch; i-=animSpeed){
    eyePosY = max(i, 0);

    display.clearDisplay();
    display.fillRoundRect(0, eyePosY, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
    display.fillRoundRect(display.width()-eyeWidth, eyePosY, eyeWidth, eyeHeight, eyeWidth/2, WHITE);
    display.drawBitmap(display.width()/2-8, display.height()-20, pointy, 16, 10, WHITE);
    display.display();
    if(i>64-eyeWidth-eyeStretch) eyeHeight += animSpeed;
    else if(i<=0) eyeHeight -= animSpeed;
  }

}

//X goes ->
//Y goes (down )
void ethanolScreen() {
    display.clearDisplay();
    display.setTextWrap(false);
    display.setTextColor(WHITE);
    display.drawRoundRect(0, 0, 128, 64, 3, 1);
    display.setCursor(28, 10);
    display.println("Ethanol:   %");
    display.setCursor(80, 10);
    display.print(ethanol);

    display.setCursor(1, 20);
    display.println("        Hz     C     ");
    display.setCursor(40,20);
    display.print(HZ);
    display.setCursor(65,20);
    display.print(temperature);
    Serial.println(ethanol);
    Serial.println(pwm_output);
    Serial.println(expectedv);
    Serial.println(HZ);
    display.drawBitmap(40, 32, smallBrzCar, 60, 40, WHITE); //draw v3 small car 
    display.display();
}
